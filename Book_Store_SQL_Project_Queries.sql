create database BookStore;

use BookStore;

DROP TABLE IF EXISTS Books;
CREATE TABLE Books(
Book_ID INT PRIMARY KEY,
Title VARCHAR(100),
Author VARCHAR(100),
Genre VARCHAR(50),
Published_Year INT,
Price NUMERIC(10,2),
Stock INT
);

DROP TABLE IF EXISTS Customers;
CREATE TABLE Customers(
Customer_ID INT PRIMARY KEY,
Name VARCHAR(100),
Email VARCHAR(100),
Phone INT,
City VARCHAR(50),
Country VARCHAR(100)
);

DROP TABLE IF EXISTS Orders;
CREATE TABLE Orders(
Order_ID INT PRIMARY KEY,
Customer_ID INT REFERENCES Customers(Customer_ID),
Book_ID INT REFERENCES Books(Book_ID),
Order_Date DATE,
Quantity INT,
Total_Amount NUMERIC(10,2)
);

SELECT * FROM Books;
SELECT * FROM Customers;
SELECT * FROM Orders;

# ------- Import Data into Tables From CSV Files----
# Used data import wizard
SELECT * FROM Books;
SELECT * FROM Customers;
SELECT * FROM Orders;

# retrieve all books in the "Fiction" genre
SELECT * 
FROM Books
WHERE Genre = "Fiction";

SELECT Title
FROM Books
WHERE Genre = "Fiction"
;

# Retrieve all books published after 1950:-

SELECT *
FROM Books
WHERE Published_Year > 1950;

# List all the customers from Canada:-

SELECT Name 
FROM Customers
WHERE Country = "Canada";

SELECT * 
FROM Customers
WHERE Country = "Canada";

# List of orders placed in NOvember 2023:-
SELECT * 
FROM Orders
WHERE Order_Date BETWEEN '2023-11-1' AND '2023-11-30';

# Retreive the total stock of books available:-

SELECT SUM(Stock) as Total_Stocks
FROM Books;

# Find details of most expensive book:-

SELECT *
FROM Books 
ORDER BY Price DESC 
limit 1 ;

# Show all customers that have ordered quantity more than 1:-

SELECT * 
FROM Orders 
WHERE Quantity > 1;

# Show all orders where total amount exceeds $20:-

SELECT *
FROM Orders 
WHERE Total_Amount > 20;

# Show all the Genres available at the store:-

SELECT DISTINCT Genre
FROM Books;

# Find the Book with the lowest stock

SELECT * 
FROM Books 
ORDER BY Stock ASC
LIMIT 1;

# Calculate the total revenue generated by all orders;

SELECT SUM(Total_Amount)
FROM Orders;

# -------ADVANCED QUERIES--------

# Retrieve the total number of books sold by each genre

SELECT b.Genre, o. Quantity
FROM Orders as o
JOIN Books as b
ON o.Book_ID = b.Book_ID;

SELECT b.Genre, SUM(o. Quantity) AS Total_Books_Sold
FROM Orders as o
JOIN Books as b
ON o.Book_ID = b.Book_ID
GROUP BY b.Genre;

# Find the average price of the books in the fantasy genre

SELECT AVG(Price) AS Average_Price
FROM Books 
WHERE Genre = 'Fantasy';

# List Customers who have placed atleast 2 orders:-

SELECT Customer_ID,
COUNT(Order_ID) AS Order_Count
FROM Orders
GROUP BY Customer_ID
HAVING COUNT(Order_ID) >= 2;

SELECT o.Customer_ID, c.Name,
COUNT(o.Order_ID) AS Order_Count
FROM Orders as o
JOIN Customers as c 
ON o.Customer_ID = c.Customer_ID
GROUP BY o.Customer_ID, c.Name
HAVING COUNT(o.Order_ID) >= 2;

# Find the Most Frequently Ordered Book

SELECT o.Book_ID, b.Title, COUNT(o.Order_ID) AS Order_Count
FROM Orders AS o
JOIN Books as b
ON o.Book_ID = b.Book_ID
GROUP BY o.Book_ID, b.Title
ORDER BY Order_Count DESC;

# Show top 3 most expensive books from Fantasy Genre:-

SELECT * 
FROM Books
WHERE Genre = 'Fantasy'
ORDER BY Price DESC LIMIT 3;

# Retrieve the total quantity of books sold by each author

SELECT b.Author, SUM(o.Quantity) AS Total_Books_Sold
FROM Orders AS o
JOIN Books AS b
ON o.Book_ID = b.Book_ID
GROUP BY b.Author
ORDER BY Total_Books_Sold DESC;

# List the cities where the customers have spent over $30 are located

SELECT DISTINCT c.City, Total_Amount
FROM Orders as o
JOIN Customers AS c
ON o.Customer_ID = c.Customer_ID
WHERE o.Total_Amount > 30;
 
# Find the Customer who spent the most on orders:-

SELECT c.Customer_ID, c.Name, SUM(o.Total_Amount) AS Total_Spent
FROM Orders as o
JOIN Customers as c
ON o.Customer_ID = c.Customer_ID
GROUP BY c.Customer_ID
ORDER BY Total_Spent DESC LIMIT 1;

# Calculate the stock remaining after fulfilling all orders:-

SELECT b.Book_ID, b.Title, b.Stock, COALESCE(SUM(o.Quantity),0) AS Order_Quantity 
FROM Books AS b
LEFT JOIN Orders AS o
ON b.Book_ID = o.Book_ID
GROUP BY b.Book_ID;

SELECT b.Book_ID, b.Title, b.Stock, 
COALESCE(SUM(o.Quantity),0) AS Order_Quantity ,
b.Stock - COALESCE(SUM(o.Quantity),0) AS Left_Stock
FROM Books AS b
LEFT JOIN Orders AS o
ON b.Book_ID = o.Book_ID
GROUP BY b.Book_ID;